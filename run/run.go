package run

import (
	"context"
	"errors"
	"fmt"
	"go/importer"
	"go/types"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strings"

	"github.com/spf13/viper"

	"github.com/pizzahutdigital/phdmw/phdlog"

	"github.com/yummydev/grpcgen/codegen"
)

// StripGopath teks the directory to a package and remove the gopath to get the
// cannonical package name
func StripGopath(p string) string {
	for _, gopath := range strings.Split(os.Getenv("GOPATH"), ":") {
		p = strings.Replace(p, path.Join(gopath, "src")+"/", "", 1)
	}
	return p
}

func Start(ctx context.Context) error {
	pkg := viper.GetString("package")
	target := viper.GetString("target")
	if pkg == "" || target == "" {
		phdlog.Error("Both --package and --target are required", "")
		return errors.New("bad param")
	}

	var pkgPath string
	var err error
	if pkg == "" || pkg[0] == '.' {
		pkgPath, err = filepath.Abs(filepath.Clean(pkg))
		if err != nil {
			return err
		}
		pkg = StripGopath(pkgPath)
	}
	p, err := importer.For("source", nil).Import(pkg)
	if err != nil {
		return err
	}
	obj := p.Scope().Lookup(target)
	if obj == nil {
		phdlog.Error(
			fmt.Sprintf("Cannot find target %q in package %q scope\n", target, pkg),
			"",
		)
		return errors.New("not exist")
	}

	// parse the variable passed in
	variable, ok := obj.(*types.Var)
	if !ok {
		phdlog.Error(
			fmt.Sprintf("%q invalid. grpcgen only works for variable declarations\n", target),
			"",
		)
		return errors.New("target is not a variable")
	}

	// ensure that the variable is an interface type generated by protobufs
	grpcInter, ok := variable.Type().Underlying().(*types.Interface)
	if !ok {
		phdlog.Error(
			fmt.Sprintf("%q invalid. grpcgen requires %q to be a GRPCClient interface. got %q\n", target, target, variable.Type().String()),
			"",
		)
		return errors.New("target is not an interface")
	}

	// import the package the interface belongs to
	interPkgSeg := strings.Split(variable.Type().String(), ".")
	interPkg := strings.Join(interPkgSeg[:len(interPkgSeg)-1], ".")
	ip, err := importer.Default().Import(interPkg)
	if err != nil {
		return err
	}

	phdlog.Info(fmt.Sprintf("Generating client test code for %q of package %q\n", target, pkg), "")
	g := codegen.NewClientGenerator(variable, grpcInter, ip)

	// generate the client
	err = g.GenerateClientsFile()
	if err != nil {
		return err
	}

	// generate all the hanlers
	for _, h := range g.HandlerGenerators() {
		err = h.GenerateHandlerTestFile()
		if err != nil {
			return err
		}
	}

	// generate test runner
	err = g.GenerateRunTestsFile()
	if err != nil {
		return err
	}

	// run goimports
	importsCmd := exec.Command("goimports", "-w", pkgPath)
	out, err := importsCmd.Output()
	fmt.Println(string(out))
	if err != nil {
		return err
	}
	return nil
}
